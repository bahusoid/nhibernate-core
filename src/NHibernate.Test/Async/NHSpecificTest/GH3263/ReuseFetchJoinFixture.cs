//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NHibernate.Linq;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.GH3263
{
	using System.Threading.Tasks;
	[TestFixture]
	public class ReuseFetchJoinFixtureAsync : BugTestCase
	{
		[Test]
		public async Task ReuseJoinScalarSelectAsync()
		{
			using var session = OpenSession();
			await (session.Query<Employee>()
				.Fetch(x => x.OptionalInfo)
				.Where(x => x.OptionalInfo != null)
				.Select(x => new { x.OptionalInfo.Age })
				.ToListAsync());
		}

		[Test]
		public async Task ReuseJoinScalarSelectHqlAsync()
		{
			using var session = OpenSession();
			await (session.CreateQuery(
				"select x.OptionalInfo.Age " +
				"from Employee x " +
				"fetch x.OptionalInfo " +
				"where x.OptionalInfo != null ").ListAsync());

		}

		[Test]
		public async Task ReuseJoinScalarSelectHql2Async()
		{
			using var session = OpenSession();
			await (session.CreateQuery(
				"select x.OptionalInfo.Age " +
				"from Employee x " +
				"join fetch x.OptionalInfo o " +
				"where o != null ").ListAsync());
		}

		[Test]
		public async Task ReuseJoinScalarSelectHql3Async()
		{
			using var session = OpenSession();
			await (session.CreateQuery(
				"select x.OptionalInfo.Age from Employee x " +
				"join fetch x.OptionalInfo " +
				"where x.OptionalInfo != null ").ListAsync());
		}

		[Test]
		public async Task ReuseJoinEntityAndScalarSelectAsync()
		{
			using var session = OpenSession();
			await (session.Query<Employee>()
				.Fetch(x => x.OptionalInfo)
				.Where(x => x.OptionalInfo != null)
				.Select(x => new { x, x.OptionalInfo.Age })
				.ToListAsync());
		}
	}
}
