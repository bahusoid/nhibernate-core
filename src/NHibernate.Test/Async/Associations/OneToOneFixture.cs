//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Linq;
using NHibernate.Cfg.MappingSchema;
using NHibernate.Mapping.ByCode;
using NUnit.Framework;
using NHibernate.Linq;

namespace NHibernate.Test.Associations.OneToOne
{
	using System.Threading.Tasks;
	[TestFixture]
	public class OneToOneFixtureAsync: TestCaseMappingByCode
	{
		[Test]
		public async Task OneToOneCompositeQueryByEntityParamAsync()
		{
			using (var session = OpenSession())
			{
				var e = await (session.Query<EntityWithCompositeId>().FirstOrDefaultAsync());
				var loadedEntity = await (session.Query<Parent>().Where(p => p.OneToOneComp == e).FirstOrDefaultAsync());

				Assert.That(loadedEntity, Is.Not.Null);
			}
		}
		
		[Test]
		public async Task OneToOneCompositeQueryByKeyAsync()
		{
			using (var session = OpenSession())
			{
				var e = await (session.Query<EntityWithCompositeId>().FirstOrDefaultAsync());
				var loadedEntity = await (session.Query<Parent>().Where(p => p.OneToOneComp.Key == e.Key).FirstOrDefaultAsync());
				
				Assert.That(loadedEntity, Is.Not.Null);
			}
		}
		
		[Test]
		public async Task OneToOneCompositeQueryByNotNullAsync()
		{
			using (var session = OpenSession())
			{
				var e = await (session.Query<EntityWithCompositeId>().FirstOrDefaultAsync());
				var loadedEntity = await (session.Query<Parent>().Where(p => p.OneToOneComp != null).FirstOrDefaultAsync());

				Assert.That(loadedEntity, Is.Not.Null);
			}
		}

		#region Test Setup

		protected override HbmMapping GetMappings()
		{
			var mapper = new ModelMapper();
			
			mapper.Class<EntityWithCompositeId>(
				rc =>
				{
					rc.ComponentAsId(
						e => e.Key,
						ekm =>
						{
							ekm.Property(ek => ek.Id1);
							ekm.Property(ek => ek.Id2);
						});

					rc.Property(e => e.Name);
				});
			
			mapper.Class<Parent>(
				rc =>
				{
					rc.ComponentAsId(
						e => e.Key,
						ekm =>
						{
							ekm.Property(ek => ek.Id1);
							ekm.Property(ek => ek.Id2);
						});

					rc.OneToOne(e => e.OneToOneComp, m => { });
				});

			return mapper.CompileMappingForAllExplicitlyAddedEntities();
		}

		protected override void OnTearDown()
		{
			using (ISession session = OpenSession())
			using (ITransaction transaction = session.BeginTransaction())
			{
				session.Delete("from System.Object");

				session.Flush();
				transaction.Commit();
			}
		}

		protected override void OnSetUp()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				var key = new CompositeKey
				{
					Id1 = 4,
					Id2 = 3,
				};
				var oneToOneParent = new Parent()
				{
					OneToOneComp = new EntityWithCompositeId
					{
						Key = key,
						Name = "Composite2"
					},
					Key = key
				};

				session.Save(oneToOneParent.OneToOneComp);
				session.Save(oneToOneParent);

				session.Flush();
				transaction.Commit();
			}
		}

		#endregion Test Setup
	}
}
