//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Data.Common;
using NHibernate.Connection;
using Environment = NHibernate.Cfg.Environment;

namespace NHibernate.MultiTenancy
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class DefaultMultiTenancyConnectionProvider : IMultiTenancyConnectionProvider
	{
		partial class ContextualConnectionAccess : IConnectionAccess
		{

			public Task<DbConnection> GetConnectionAsync(IConnectionProvider provider, CancellationToken cancellationToken)
			{
				if (cancellationToken.IsCancellationRequested)
				{
					return Task.FromCanceled<DbConnection>(cancellationToken);
				}
				return provider.GetConnectionAsync(ConnectionString, cancellationToken);
			}
		}
	}
}
