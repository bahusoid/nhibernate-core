//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace NHibernate
{
	public static partial class FutureExtensions
	{

		#region Helper classes

		partial class FutureValue<TResult> : IFutureValue<TResult>
		{

			public async Task<TResult> GetValueAsync(CancellationToken cancellationToken = default(CancellationToken))
			{
				cancellationToken.ThrowIfCancellationRequested();
				if (_batch == null)
					return _result;

				await (_batch.ExecuteAsync(cancellationToken)).ConfigureAwait(false);
				_result = _query.GetResults().FirstOrDefault();

				_batch = null;
				_query = null;

				return _result;
			}
		}

		partial class FutureList<TResult> : IFutureList<TResult>
		{

			public async Task<IList<TResult>> GetValueAsync(CancellationToken cancellationToken = default(CancellationToken))
			{
				cancellationToken.ThrowIfCancellationRequested();
				if (_batch == null)
					return _list;

				await (_batch.ExecuteAsync(cancellationToken)).ConfigureAwait(false);
				_list = _query.GetResults();

				_batch = null;
				_query = null;

				return _list;
			}
		}

		#endregion Helper classes
	}
}
