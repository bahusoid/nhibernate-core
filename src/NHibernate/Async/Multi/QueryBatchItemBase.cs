//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using NHibernate.Cache;
using NHibernate.Engine;
using NHibernate.SqlCommand;
using NHibernate.Util;

namespace NHibernate.Multi
{
	using System.Threading.Tasks;
	using System.Threading;
	public abstract partial class QueryBatchItemBase<TResult> : IQueryBatchItem<TResult>
	{

		public async Task<IEnumerable<ISqlCommand>> GetCommandsAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			var yields = new List<ISqlCommand>();
			for (var index = 0; index < _queryInfos.Count; index++)
			{
				var qi = _queryInfos[index];

				IList resultsFromCache = null;
				await (qi.Loader.ProcessCachedResultsAsync(
					Session,
					qi.Parameters,
					qi.QuerySpaces,
					(cache, key, results) =>
					{
						qi.CacheKey = key;
						qi.Cache = cache;
						resultsFromCache = results;
					}, cancellationToken)).ConfigureAwait(false);

				if (resultsFromCache != null)
				{
					qi.Cache = null;
					_loaderResults[index] = resultsFromCache;
					continue;
				}
			yields.Add(qi.Loader.CreateSqlCommand(qi.Parameters, Session));
			}
			return yields;
		}

		public async Task PostProcessAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			for (int i = 0; i < _queryInfos.Count; i++)
			{
				var queryInfo = _queryInfos[i];
				if (_subselectResultKeys[i] != null)
				{
					queryInfo.Loader.CreateSubselects(_subselectResultKeys[i], queryInfo.Parameters, Session);
				}

				//Maybe put in cache...
				if (queryInfo.Cache != null)
				{
					await (queryInfo.Loader.PutResultInQueryCacheAsync(Session, queryInfo.Parameters, queryInfo.Cache, queryInfo.CacheKey, _loaderResults[i], cancellationToken)).ConfigureAwait(false);
				}
			}
		}

		public async Task ExecuteNonBatchableAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			_finalResults = await (ExecuteQueryNowAsync(cancellationToken)).ConfigureAwait(false);
		}

		protected abstract Task<IList<TResult>> ExecuteQueryNowAsync(CancellationToken cancellationToken);
	}
}
