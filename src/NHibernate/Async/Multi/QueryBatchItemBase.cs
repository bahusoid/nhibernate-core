//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using NHibernate.Cache;
using NHibernate.Engine;
using NHibernate.SqlCommand;
using NHibernate.Transform;
using NHibernate.Util;

namespace NHibernate
{
	using System.Threading.Tasks;
	using System.Threading;
	public abstract partial class QueryBatchItemBase<TResult> : IQueryBatchItem<TResult>
	{

		public async Task PostProcessAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (_reader == null)
				return;

			for (int i = 0; i < _queryInfos.Count; i++)
			{
				Loader.Loader loader = _queryInfos[i].Loader;
				await (loader.InitializeEntitiesAndCollectionsAsync(
					_hydratedObjects[i], _reader, Session, Session.PersistenceContext.DefaultReadOnly, cancellationToken)).ConfigureAwait(false);

				if (_subselectResultKeys[i] != null)
				{
					loader.CreateSubselects(_subselectResultKeys[i], _queryInfos[i].Parameters, Session);
				}

				//Maybe put in cache...
				_queryInfos[i].PutInCacheAction?.Invoke(_loaderResults[i]);
			}
			_reader = null;
		}

		public async Task ExecuteNonBatchableAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			_finalResults = await (ExecuteQueryNowAsync(cancellationToken)).ConfigureAwait(false);
		}

		protected abstract Task<IList<TResult>> ExecuteQueryNowAsync(CancellationToken cancellationToken = default(CancellationToken));
	}
}
